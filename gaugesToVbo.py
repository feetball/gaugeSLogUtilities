import pandas as pd
from datetime import datetime

def convert_dd_to_dmm(dd):
    degrees = int(dd)
    decimal_part = abs(dd - degrees)
    minutes = decimal_part * 60
    dmm = degrees * 100 + minutes
    # Add a plus sign for positive values and handle negative values correctly
    if dd >= 0:
        return f"+{dmm:.6f}"
    else:
        return f"{dmm:.6f}"

def convert_csv_to_vbo(csv_path, vbo_path):
    # Load CSV file
    df = pd.read_csv(csv_path)

    # Compute time in seconds since midnight
    df["Time (s)"] = (
        df["Hour (h)"] * 3600
        + df["Minute (min)"] * 60
        + df["Second (s)"]
        + df["Timestamp (ms)"] / 1000.0
    )
    
    # Parse the 'Date' column to extract year, month, and day
    df['Year'] = df['Date'].astype(str).str[0:2].astype(int) + 2000
    df['Month'] = df['Date'].astype(str).str[2:4].astype(int)
    df['Day'] = df['Date'].astype(str).str[4:6].astype(int)

    # Combine date and time columns to create a datetime object
    df['datetime'] = pd.to_datetime(df[['Year', 'Month', 'Day']]) + pd.to_timedelta(df['Time (s)'], unit='s')

    # Compute epoch time (seconds since 1970-01-01)
    df['Epoch Time (s)'] = df['datetime'].astype(int) / 10**9

    # Convert DD to DMM for latitude and longitude
    df["GPS Latitude (°)"] = df["GPS Latitude (°)"].apply(convert_dd_to_dmm)
    df["GPS Longitude (°)"] = df["GPS Longitude (°)"].apply(convert_dd_to_dmm)

    # Add a column named "sats" with a value of 10 for every row
    df["sats"] = 10

    # Select relevant columns for VBO format, with "sats" as the first column
    vbo_columns = [
        "sats",
        'Epoch Time (s)',
        "GPS Latitude (°)",
        "GPS Longitude (°)",
        "GPS North (Angle)",
        "GPS Altitude (m)", 
        "Speed (mph)",       
        "GPS Speed (km/h)",
        "Accel X (g)",
        "Accel Y (g)",
        "Accel Z (g)",
        "Intake Air Temp (°F)",
        "Coolant Temp (°F)",
        "Fuel usage (l/h)",
        "Engine Speed (RPM)",
        "Engine Load (mg/str)",
        "Mass Airflow (kg/h)",
        "MAF Voltage (V)",
        "Knock Current (°CRK)",
        "Vanos (°CRK)",
        "TPS (%)",
        "Ignition Angle (°CRK)",
        "Fuel Inj (ms)",
        "Speed (mph)",
        "IACV (%)",
        "Lambda Int 1 (%)",
        "Lambda Int 2 (%)",
        "Lambda 1 (V)",
        "Lambda 2 (V)",
        "Battery Voltage (V)",
        "WBO (AFR)",
        "Oil Temp (°F)",
        "Oil Pressure (PSI)",
        "Brake Pressure (%)"
    ]

    # Dictionary for renaming columns
    column_rename_dict = {
        "sats": "satellites",
        "Epoch Time (s)": "time",
        "GPS Latitude (°)": "latitude",
        "GPS Longitude (°)": "longitude",
        "Speed (mph)": "velocity mph",
        "GPS North (Angle)": "heading",
        "Accel X (g)": "accelX",
        "Accel Y (g)": "accelY",
        "Accel Z (g)": "accelZ",
        "Intake Air Temp (°F)": "intakeAirTemp",
        "Coolant Temp (°F)": "coolantTemp"
    }

    # Rename columns to match VBO expected format
    df_vbo = df[vbo_columns].rename(columns=column_rename_dict)

    # Create a list of column names for the header
    header_columns = [column_rename_dict.get(col, col) for col in vbo_columns]

    # Write to VBO file
    with open(vbo_path, "w", newline='') as vbo_file:
        # Write header
        vbo_file.write("[header]\n")
        for column in header_columns:
            vbo_file.write(column + "\n")

        # Write comments
        vbo_file.write("\n[comments]\n")
        vbo_file.write("Generated by LapTimer v24.9.1\n")
        vbo_file.write("(c) 2006-2024 Harald Schlangmann\n")
        vbo_file.write("Rename or convert video asset.mov?id=35EB7BD1-E6DA-4F97-BD98-EC420F6222C1&ext=mov to VID_0030.MP4\n")

        # Write column names
        vbo_file.write("\n[column names]\n")
        for column in df_vbo.columns:
            vbo_file.write(column + " ")

        vbo_file.write("\n\n[Data]\n")

        # Write data rows with space as separator
        df_vbo.to_csv(vbo_file, index=False, header=False, sep=' ', float_format="%.6f", lineterminator='\n')

    print(f"Conversion complete! VBO file saved to {vbo_path}")

# Example usage
csv_file = "./gauge.s_25-02-09_19-36.csv"
vbo_file = "./output.vbo"
convert_csv_to_vbo(csv_file, vbo_file)
